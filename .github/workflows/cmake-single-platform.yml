# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  workflow_dispatch:
  

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
    - uses: TheMrMilchmann/setup-msvc-dev@v3
      with:
        arch: x64

    - name: build dir
      run: |
        mkdir build
        mkdir D:\a\blink\sqlite
        Invoke-WebRequest -Uri https://www.sqlite.org/2025/sqlite-amalgamation-3490200.zip -OutFile D:\a\blink\sqlite\sqlite-amalgamation-3490200.zip
        Invoke-WebRequest -Uri https://www.sqlite.org/2025/sqlite-dll-win-x64-3490200.zip -OutFile D:\a\blink\sqlite\sqlite-dll-win-x64-3490200.zip
        Expand-Archive -Path D:\a\blink\sqlite\sqlite-amalgamation-3490200.zip -DestinationPath D:\a\blink\sqlite
        Expand-Archive -Path D:\a\blink\sqlite\sqlite-dll-win-x64-3490200.zip -DestinationPath D:\a\blink\sqlite
        lib /DEF:D:\a\blink\sqlite\sqlite3.def /OUT:D:\a\blink\sqlite\sqlite3.lib /MACHINE:x64
        ls D:\a\blink\sqlite
        # ls D:\a\blink\blink\sqlite\sqlite-src-3490200
        # cp sqlite\sqlite3.def "C:/Program Files/OpenSSL/lib/VC/"
        # cp sqlite\sqlite3.dll "C:/Program Files/OpenSSL/lib/VC/"
        # cp sqlite\sqlite3.exp "C:/Program Files/OpenSSL/lib/VC/"
        # cp sqlite\sqlite3.lib "C:/Program Files/OpenSSL/lib/VC/"
    #     cd build
      
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cd build
        cmake .. -DSQLite3_LIBRARY=D:\a\blink\sqlite -DSQLite3_INCLUDE_DIR=D:\a\blink\sqlite\sqlite-amalgamation-3490200 
        ls
        make

    # 

    # - name: Build
    #   # Build your program with the given configuration
    #   run: | #make --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
    #     cd build
    #     make

    - name: 'Upload artifact'
      uses: actions/upload-artifact@v4
      with:
        name: blink
        retention-days: 3
        path: |
          *.exe
